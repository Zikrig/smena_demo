from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from config import GROUP_ID
from states import Form
from keyboards import get_locations_keyboard, get_cancel_keyboard, get_main_inline_keyboard
from datetime import datetime

from aiogram import Router
router = Router()

@router.message(F.text.in_(["üì∏ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É"]))
async def handle_shift(message: Message, state: FSMContext):
    action_type = "start" if "–ù–∞—á–∞—Ç—å" in message.text else "end"
    await state.update_data(action_type=action_type)
    await state.set_state(Form.shift_action)
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
        reply_markup=get_locations_keyboard()
    )

@router.callback_query(Form.shift_action, F.data.startswith("loc_"))
async def handle_location_selection(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_", 1)[1]
    if data == "other":
        await state.update_data(expecting_custom_location=True)
        await state.set_state(Form.photo)
        await callback.message.answer(
            "üì∏ –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –æ–±—ä–µ–∫—Ç:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await state.update_data(location=data)
        await state.set_state(Form.photo)
        await callback.message.answer(
            "üì∏ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=get_cancel_keyboard()
        )
    await callback.answer()

@router.message(Form.photo, F.photo)
async def handle_shift_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    action_type = data["action_type"]
    if data.get("expecting_custom_location"):
        if not message.caption:
            await message.answer(
                "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ!\n\n"
                "üì∏ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
                "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
            )
            return
        location = message.caption.strip()
        if len(location) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "üì∏ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
                "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
            )
            return
        await state.update_data(location=location, expecting_custom_location=False)
    if "location" not in await state.get_data():
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    location = (await state.get_data())["location"]
    current_time = datetime.now().strftime("%H:%M")
    action_text = "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã" if action_type == "start" else "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã"
    emoji = "üì∏" if action_type == "start" else "üîö"
    caption = (
        f"{emoji} <b>{action_text}</b>\n"
        f"üìç –û–±—ä–µ–∫—Ç: {location}\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
        f"üßç –§–æ—Ç–æ –±—Ä–∏–≥–∞–¥—ã: [–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]"
    )
    await message.bot.send_photo(
        chat_id=GROUP_ID,
        photo=message.photo[-1].file_id,
        caption=caption,
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!", reply_markup=get_main_inline_keyboard())
