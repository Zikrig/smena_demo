from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from config import GROUP_ID
from states import Form
from keyboards import get_main_inline_keyboard, get_cancel_keyboard, get_confirm_keyboard, get_locations_keyboard
from aiogram.enums import ParseMode

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ <b>—Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç</b> –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ/–æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã –î–õ–Ø –ë–†–ò–ì–ê–î –ü–û–í–†–ï–ú–ï–ù–ù–û–ô –û–ü–õ–ê–¢–´, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã.\n\n<b>–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É:</b> @brigadControl\n\n–ó–∞–∫–∞–∂–∏—Ç–µ –ø–æ–¥–æ–±–Ω–æ–≥–æ –±–æ—Ç–∞ —É –º–µ–Ω—è @fgriz, —è –±—É–¥—É —Ä–∞–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_inline_keyboard()
    )

@router.callback_query(F.data == "cancel_action")
async def handle_inline_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_inline_keyboard())
    await callback.answer()

@router.callback_query(F.data == "start_shift")
async def handle_start_shift(callback: CallbackQuery, state: FSMContext):
    await state.update_data(action_type="start")
    await state.set_state(Form.shift_action)
    await callback.message.edit_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
        reply_markup=get_locations_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "end_shift")
async def handle_end_shift(callback: CallbackQuery, state: FSMContext):
    await state.update_data(action_type="end")
    await state.set_state(Form.shift_action)
    await callback.message.edit_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
        reply_markup=get_locations_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "move_team")
async def handle_move_team(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.transfer_current_location)
    await callback.message.edit_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç:",
        reply_markup=get_locations_keyboard()
    )
    await callback.answer()
    
@router.callback_query(F.data == "piecework")
async def handle_piecework(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.piecework)
    await callback.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–û–±—ä–µ–∫—Ç, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –§–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–£—Å–ø–µ–Ω—Å–∫–∞—è 6, –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ 34, –†–∞–¥–∂–∞–±–æ–≤ –£—Å–º–æ–Ω–æ–≤</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "send_location")
async def ask_location(callback: CallbackQuery, state: FSMContext):
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=location_keyboard
    )
    await state.set_state("waiting_location")
    await callback.answer()

@router.message(F.content_type == "location")
async def handle_location(message: Message, state: FSMContext):
    if await state.get_state() == "waiting_location":
        await message.bot.send_location(
            chat_id=GROUP_ID,
            latitude=message.location.latitude,
            longitude=message.location.longitude
        )
        await message.answer(
            "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inline_keyboard()
        )

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    if await state.get_state() == "waiting_location":
        await message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inline_keyboard()
        )
        
@router.callback_query(F.data == "send_round")
async def ask_round(callback: CallbackQuery, state: FSMContext):
    await state.set_state("waiting_round")
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ) —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.message(F.content_type.in_(["video_note"]))
async def handle_video_note(message: Message, state: FSMContext):
    if await state.get_state() == "waiting_round":
        await state.update_data(video_message_id=message.message_id)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫—Ä—É–∂–æ—á–µ–∫ –≤ –≥—Ä—É–ø–ø—É?",
            reply_markup=get_confirm_keyboard("confirm_round")
        )

@router.callback_query(F.data == "confirm_round")
async def confirm_round(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    video_message_id = data.get("video_message_id")
    if video_message_id:
        await callback.bot.forward_message(chat_id=GROUP_ID, from_chat_id=callback.from_user.id, message_id=video_message_id)
        await state.clear()
        await callback.message.edit_text("‚úÖ –ö—Ä—É–∂–æ—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!", reply_markup=get_main_inline_keyboard())
    await callback.answer()