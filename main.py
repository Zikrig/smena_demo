import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from os import getenv

load_dotenv()

BOT_TOKEN = getenv("BOT_TOKEN")
GROUP_ID = getenv("GROUP_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
LOCATIONS = [
    "–ü–æ–∫–ª–æ–Ω–Ω–æ–≥–æ—Ä—Å–∫–∞—è 13",
    "–£—Å–ø–µ–Ω—Å–∫–∞—è 6",
    "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è 3",
    "–°–æ–≤—Ö–æ–∑–Ω–∞—è 15",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è 7"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    shift_action = State()
    photo = State()
    transfer = State()
    piecework = State()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üì∏ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"))
    builder.add(types.KeyboardButton(text="üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É"))
    builder.add(types.KeyboardButton(text="üí∞ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–¥–µ–ª—å–Ω—É—é"))
    builder.add(types.KeyboardButton(text="üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞
def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
def get_locations_keyboard():
    builder = InlineKeyboardBuilder()
    for location in LOCATIONS:
        builder.button(text=location, callback_data=f"loc_{location}")
    builder.button(text="–î—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç", callback_data="loc_other")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1, 1, 1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ <b>—Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç</b> –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ/–æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã –î–õ–Ø –ë–†–ò–ì–ê–î –ü–û–í–†–ï–ú–ï–ù–ù–û–ô –û–ü–õ–ê–¢–´, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã.\n\n<b>–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É: @brigadeControlTestBot",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel_action")
async def handle_inline_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞/–æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
@router.message(F.text.in_(["üì∏ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É"]))
async def handle_shift(message: Message, state: FSMContext):
    action_type = "start" if "–ù–∞—á–∞—Ç—å" in message.text else "end"
    await state.update_data(action_type=action_type)
    await state.set_state(Form.shift_action)
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
        reply_markup=get_locations_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
@router.callback_query(Form.shift_action, F.data.startswith("loc_"))
async def handle_location_selection(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_", 1)[1]
    
    if data == "other":
        # –î–ª—è "–î—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞" —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await state.update_data(expecting_custom_location=True)
        await state.set_state(Form.photo)
        await callback.message.answer(
            "üì∏ –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –æ–±—ä–µ–∫—Ç:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await state.update_data(location=data)
        await state.set_state(Form.photo)
        await callback.message.answer(
            "üì∏ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=get_cancel_keyboard()
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@router.message(Form.photo, F.photo)
async def handle_shift_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    action_type = data["action_type"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Ä–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–∏)
    if data.get("expecting_custom_location"):
        if not message.caption:
            await message.answer(
                "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ!\n\n"
                "üì∏ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
                "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
            )
            return
            
        location = message.caption.strip()
        if len(location) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "üì∏ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞\n"
                "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç
        await state.update_data(location=location, expecting_custom_location=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞
    if "location" not in await state.get_data():
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    location = (await state.get_data())["location"]
    current_time = datetime.now().strftime("%H:%M")
    action_text = "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã" if action_type == "start" else "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã"
    emoji = "üì∏" if action_type == "start" else "üîö"

    caption = (
        f"{emoji} <b>{action_text}</b>\n"
        f"üìç –û–±—ä–µ–∫—Ç: {location}\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
        f"üßç –§–æ—Ç–æ –±—Ä–∏–≥–∞–¥—ã: [–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    await bot.send_photo(
        chat_id=GROUP_ID,
        photo=message.photo[-1].file_id,
        caption=caption,
        parse_mode=ParseMode.HTML
    )
    
    await state.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã - –û–î–ò–ù –®–ê–ì
@router.message(F.text == "üí∞ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–¥–µ–ª—å–Ω—É—é")
async def handle_piecework_prompt(message: Message, state: FSMContext):
    await state.set_state(Form.piecework)
    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–û–±—ä–µ–∫—Ç, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –§–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–£—Å–ø–µ–Ω—Å–∫–∞—è 6, –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ 34, –†–∞–¥–∂–∞–±–æ–≤ –£—Å–º–æ–Ω–æ–≤</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.message(Form.piecework, F.text)
async def handle_piecework_data(message: Message, state: FSMContext):
    parts = [part.strip() for part in message.text.split(',')]
    
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–û–±—ä–µ–∫—Ç, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –§–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–£—Å–ø–µ–Ω—Å–∫–∞—è 6, –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ 34, –†–∞–¥–∂–∞–±–æ–≤ –£—Å–º–æ–Ω–æ–≤</code>",
            parse_mode=ParseMode.HTML
        )
        return
        
    location = parts[0]
    work = parts[1]
    names = ', '.join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ —Ñ–∞–º–∏–ª–∏–∏
    
    if len(location) > 100:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    
    if len(work) > 200:
        return await message.answer("‚ùå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
    
    current_time = datetime.now().strftime("%H:%M")
    
    group_msg = (
        f"üîÄ <b>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–¥–µ–ª—å–Ω—É—é:</b>\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
        f"üìç –û–±—ä–µ–∫—Ç: {location}\n"
        f"üìù –†–∞–±–æ—Ç–∞: {work}\n"
        f"üßç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {names}"
    )
    
    await bot.send_message(GROUP_ID, group_msg, parse_mode=ParseMode.HTML)
    await state.clear()
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã - –û–î–ò–ù –®–ê–ì
@router.message(F.text == "üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã")
async def handle_transfer_prompt(message: Message, state: FSMContext):
    await state.set_state(Form.transfer)
    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç, –§–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ü–æ–∫–ª–æ–Ω–Ω–æ–≥–æ—Ä—Å–∫–∞—è 13, –£—Å–º–æ–Ω–æ–≤ –†–∞–¥–∂–∞–±–æ–≤, –£—Å–ø–µ–Ω—Å–∫–∞—è 6</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã
@router.message(Form.transfer, F.text)
async def handle_transfer_data(message: Message, state: FSMContext):
    parts = [part.strip() for part in message.text.split(',')]
    
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç, –§–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ü–æ–∫–ª–æ–Ω–Ω–æ–≥–æ—Ä—Å–∫–∞—è 13, –£—Å–º–æ–Ω–æ–≤ –†–∞–¥–∂–∞–±–æ–≤, –£—Å–ø–µ–Ω—Å–∫–∞—è 6</code>",
            parse_mode=ParseMode.HTML
        )
        return
        
    current_location = parts[0]
    names = parts[1]
    new_location = ', '.join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    
    if len(current_location) > 100:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    
    if len(new_location) > 100:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    
    current_time = datetime.now().strftime("%H:%M")
    
    group_msg = (
        f"üîÑ <b>–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏:</b>\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
        f"üìç –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç: {current_location}\n"
        f"üßç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {names}\n"
        f"üöê –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç: {new_location}"
    )
    
    await bot.send_message(GROUP_ID, group_msg, parse_mode=ParseMode.HTML)
    await state.clear()
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!",
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)